## Process this file with automake to produce Makefile.in.
# Copyright (C) 2004 Free Software Foundation, Inc.
#
# This file is free software, distributed under the terms of the GNU
# General Public License.  As a special exception to the GNU General
# Public License, this file may be distributed as part of a program
# that contains a configuration script generated by Automake, under
# the same distribution terms as the rest of that program.
#
# Generated by gnulib-tool.
# Invoked as: gnulib-tool --import --dir=. --lib=libgnu --source-base=lib --m4-base=m4 alloca alloca-opt allocsa argp error exit exitfail extensions free getcwd getline getopt getpass gettext getusershell malloc memcmp memcpy memmove mempcpy memset minmax obstack poll readutmp realloc regex restrict setenv snprintf stdbool strcase strchrnul strdup strerror strndup strnlen sysexits unlocked-io vasnprintf vsnprintf xalloc xgetcwd xsize
# Reproduce by: gnulib-tool --import --dir=. --lib=libgnu --source-base=lib --m4-base=m4 --aux-dir=.   alloca alloca-opt allocsa argp error exit exitfail extensions free getcwd getline getopt getpass gettext getusershell malloc memcmp memcpy memmove mempcpy memset minmax obstack poll readutmp realloc regex restrict setenv snprintf stdbool stdio-safer strcase strchrnul strdup strerror strndup strnlen sysexits unistd-safer unlocked-io vasnprintf vsnprintf xalloc xgetcwd xsize

AUTOMAKE_OPTIONS = 1.5 gnits no-dependencies

noinst_LIBRARIES = libgnu.a

libgnu_a_SOURCES =
libgnu_a_LIBADD = @LIBOBJS@
EXTRA_DIST =
BUILT_SOURCES =
SUFFIXES =
MOSTLYCLEANFILES =
CLEANFILES =
DISTCLEANFILES =
MAINTAINERCLEANFILES =

## begin gnulib module alloca


libgnu_a_LIBADD += @ALLOCA@
## end   gnulib module alloca

## begin gnulib module alloca-opt

BUILT_SOURCES += $(ALLOCA_H)
EXTRA_DIST += alloca_.h

# We need the following in order to create an <alloca.h> when the system
# doesn't have one that works with the given compiler.
all-local $(libgnu_a_OBJECTS): $(ALLOCA_H)
alloca.h: alloca_.h
	cp $(srcdir)/alloca_.h $@-t
	mv $@-t $@
MOSTLYCLEANFILES += alloca.h alloca.h-t

## end   gnulib module alloca-opt

## begin gnulib module allocsa

libgnu_a_SOURCES += allocsa.h allocsa.c
EXTRA_DIST += allocsa.valgrind

## end   gnulib module allocsa

## begin gnulib module argp

libgnu_a_SOURCES += argp.h argp-ba.c argp-eexst.c \
           argp-fmtstream.c argp-fmtstream.h argp-fs-xinl.c argp-help.c \
           argp-namefrob.h argp-parse.c argp-pv.c argp-pvh.c argp-xinl.c

## end   gnulib module argp

## begin gnulib module exit

libgnu_a_SOURCES += exit.h

## end   gnulib module exit

## begin gnulib module getline

EXTRA_DIST += getndelim2.h getndelim2.c

## end   gnulib module getline

## begin gnulib module getopt

BUILT_SOURCES += $(GETOPT_H)
EXTRA_DIST += getopt_.h getopt_int.h

# We need the following in order to create an <getopt.h> when the system
# doesn't have one that works with the given compiler.
all-local $(libgnu_a_OBJECTS): $(GETOPT_H)
getopt.h: getopt_.h
	cp $(srcdir)/getopt_.h $@-t
	mv $@-t $@
MOSTLYCLEANFILES += getopt.h getopt.h-t

## end   gnulib module getopt

## begin gnulib module gettext

libgnu_a_SOURCES += gettext.h

## end   gnulib module gettext

## begin gnulib module minmax

libgnu_a_SOURCES += minmax.h

## end   gnulib module minmax

## begin gnulib module poll

BUILT_SOURCES += $(POLL_H)
EXTRA_DIST += poll_.h

# We need the following in order to create an <poll.h> when the system
# doesn't have one.
all-local $(libgnu_a_OBJECTS): $(POLL_H)
poll.h: poll_.h
	cp $(srcdir)/poll_.h $@-t
	mv $@-t $@
MOSTLYCLEANFILES += poll.h poll.h-t

## end   gnulib module poll

## begin gnulib module regex

libgnu_a_SOURCES += regex.h

## end   gnulib module regex

## begin gnulib module setenv

libgnu_a_SOURCES += setenv.h

## end   gnulib module setenv

## begin gnulib module snprintf

libgnu_a_SOURCES += snprintf.h

## end   gnulib module snprintf

## begin gnulib module stdbool

BUILT_SOURCES += $(STDBOOL_H)
EXTRA_DIST += stdbool_.h

# We need the following in order to create an <stdbool.h> when the system
# doesn't have one that works.
all-local $(libgnu_a_OBJECTS): $(STDBOOL_H)
stdbool.h: stdbool_.h
	sed -e 's/@''HAVE__BOOL''@/$(HAVE__BOOL)/g' < $(srcdir)/stdbool_.h > $@-t
	mv $@-t $@
MOSTLYCLEANFILES += stdbool.h stdbool.h-t

## end   gnulib module stdbool

## begin gnulib module strcase

libgnu_a_SOURCES += strcase.h

## end   gnulib module strcase

## begin gnulib module strchrnul

libgnu_a_SOURCES += strchrnul.h

## end   gnulib module strchrnul

## begin gnulib module sysexits

EXTRA_DIST += sysexit_.h

# We need the following in order to create a <sysexits.h> when the system
# doesn't have one that works with the given compiler.
all-local $(libgnu_a_OBJECTS): $(SYSEXITS_H)
sysexits.h: sysexit_.h
	cp $(srcdir)/sysexit_.h sysexits.h-t
	mv sysexits.h-t sysexits.h
MOSTLYCLEANFILES += sysexits.h sysexits.h-t

## end   gnulib module sysexits

## begin gnulib module vasnprintf

libgnu_a_SOURCES += printf-args.h printf-parse.h vasnprintf.h

## end   gnulib module vasnprintf

## begin gnulib module vsnprintf

libgnu_a_SOURCES += vsnprintf.h

## end   gnulib module vsnprintf

## begin gnulib module xgetcwd

libgnu_a_SOURCES += xgetcwd.h xgetcwd.c

## end   gnulib module xgetcwd

## begin gnulib module xsize

libgnu_a_SOURCES += xsize.h

## end   gnulib module xsize


# Makefile.am ends here
